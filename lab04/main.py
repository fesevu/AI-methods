import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from transformers import pipeline
import ssl
import aiohttp

# Workaround to ensure aiohttp works without SSL issues


def create_ssl_context():
    try:
        return ssl.create_default_context()
    except Exception as e:
        logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç: %s", e)
        return None


ssl_context = create_ssl_context()
aiohttp.connector.DefaultSelectorEventLoopPolicy = asyncio.DefaultEventLoopPolicy

# Telegram Bot Token
TELEGRAM_BOT_TOKEN = "8116977630:AAEwJB97I6JFwd3IVDAbClq8NBsn3oiGs8Q"

# Initialize transformers pipelines with chat message structure
llama3_pipeline = pipeline(
    "text-generation",
    model="unsloth/Llama-3.2-1B"
)
gpt_neo_pipeline = pipeline("text-generation", model="EleutherAI/gpt-neo-125m")

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=TELEGRAM_BOT_TOKEN)
storage = MemoryStorage()
router = Router()
dp = Dispatcher(storage=storage)
dp.include_router(router)

# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–°–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ",
                                 callback_data="free_chat")
        ]
    ]
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
model_selection_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–û–±—â–µ–Ω–∏–µ —Å LLaMA-3",
                                 callback_data="llama3"),
            InlineKeyboardButton(text="–û–±—â–µ–Ω–∏–µ —Å GPT-Neo",
                                 callback_data="gpt_neo"),
        ],
        [
            InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                 callback_data="main_menu")
        ]
    ]
)


@router.message(Command(commands=['start', 'help']))
async def send_welcome(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    await message.reply(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ '–°–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=main_keyboard
    )


@router.callback_query(lambda c: c.data == "free_chat")
async def free_chat(callback_query: types.CallbackQuery):
    """–°–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ: –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏."""
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è:",
        reply_markup=model_selection_keyboard
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data in ["llama3", "gpt_neo"])
async def choose_model(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏."""
    model_name = "LLaMA-3" if callback_query.data == "llama3" else "GPT-Neo"
    await state.update_data(model_choice=callback_query.data)
    await bot.send_message(
        callback_query.from_user.id,
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {model_name}. –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å!",
    )
    await callback_query.answer()


# –ü—Ä–æ–º–ø—Ç, –∑–∞–¥–∞—é—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ–ª–∏
INTRO_PROMPT = (
    "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å—Ñ–µ—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. "
    "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ—Ç–≤–µ—á–∞—Ç—å –Ω–æ–≤–∏—á–∫–∞–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö, "
    "–æ–±—ä—è—Å–Ω—è—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ, –Ω–æ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º. "
    "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ—á–µ—Ç, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏."
)


@router.message()
async def chat_with_model(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –º–æ–¥–µ–ª–µ–π."""
    data = await state.get_data()
    model_choice = data.get("model_choice", "llama3")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
    full_prompt = f"{INTRO_PROMPT}\n\n–í–æ–ø—Ä–æ—Å: {message.text}\n\n–û—Ç–≤–µ—Ç:"

    # –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    generation_params = {
        "max_length": 300,
        "truncation": True,
        "num_return_sequences": 1,
        "repetition_penalty": 1.2,
        "temperature": 0.7,
        "top_k": 50,
        "top_p": 0.9,
        "do_sample": True
    }

    if model_choice == "llama3":
        response = llama3_pipeline(full_prompt, **generation_params)
    else:
        response = gpt_neo_pipeline(full_prompt, **generation_params)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    generated_text = response[0]['generated_text'].split("–û—Ç–≤–µ—Ç:")[-1].strip()

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    back_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥", callback_data="free_chat"),
                InlineKeyboardButton(
                    text="üîù –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∏ –∫–Ω–æ–ø–∫–∏
    await message.answer(
        f"–û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ {('LLaMA-3' if model_choice == 'llama3' else 'GPT-Neo')}:\n\n{generated_text}",
        reply_markup=back_keyboard
    )


@router.callback_query(lambda c: c.data == "main_menu")
async def back_to_main_menu(callback_query: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await callback_query.message.edit_text(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–∞–∂–º–∏—Ç–µ '–°–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
        reply_markup=main_keyboard
    )
    await callback_query.answer()


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    connector = aiohttp.TCPConnector(ssl=ssl_context)
    async with aiohttp.ClientSession(connector=connector) as session:
        bot._session = session
        await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
