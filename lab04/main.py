import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from transformers import pipeline
import ssl
import aiohttp

# Workaround to ensure aiohttp works without SSL issues


def create_ssl_context():
    try:
        return ssl.create_default_context()
    except Exception as e:
        logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç: %s", e)
        return None


ssl_context = create_ssl_context()
aiohttp.connector.DefaultSelectorEventLoopPolicy = asyncio.DefaultEventLoopPolicy

# Telegram Bot Token
TELEGRAM_BOT_TOKEN = "8116977630:AAEwJB97I6JFwd3IVDAbClq8NBsn3oiGs8Q"

# Initialize transformers pipelines with chat message structure
llama3_pipeline = pipeline(
    "text-generation",
    model="unsloth/Llama-3.2-1B"
)
gpt_neo_pipeline = pipeline("text-generation", model="EleutherAI/gpt-neo-1.3B")

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=TELEGRAM_BOT_TOKEN)
storage = MemoryStorage()
router = Router()
dp = Dispatcher(storage=storage)
dp.include_router(router)

# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã",
                                 callback_data="general_questions")
        ],
        [
            InlineKeyboardButton(text="–°–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ",
                                 callback_data="free_chat")
        ]
    ]
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
model_selection_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–û–±—â–µ–Ω–∏–µ —Å LLaMA-3",
                                 callback_data="llama3"),
            InlineKeyboardButton(text="–û–±—â–µ–Ω–∏–µ —Å GPT-Neo",
                                 callback_data="gpt_neo"),
        ],
        [
            InlineKeyboardButton(text="üîô –í –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                 callback_data="main_menu")
        ]
    ]
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
general_questions_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–ß—Ç–æ —Ç–∞–∫–æ–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞",
                                 callback_data="crypto_question"),
            InlineKeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –±–∏—Ä–∂–µ",
                                 callback_data="reg_on_exchange"),
        ],
        [
            InlineKeyboardButton(text="üîô –í –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                 callback_data="main_menu")
        ]
    ]
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–¥–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
crypto_types_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–°—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã",
                                 callback_data="stablecoins"),
            InlineKeyboardButton(text="–ê–ª—å—Ç–∫–æ–∏–Ω—ã",
                                 callback_data="altcoins"),
            InlineKeyboardButton(text="Bitcoin",
                                 callback_data="bitcoin"),
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥",
                                 callback_data="general_questions"),
            InlineKeyboardButton(text="üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                 callback_data="main_menu")
        ]
    ]
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –±–∏—Ç–∫–æ–∏–Ω–∞
bitcoin_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥",
                                 callback_data="crypto_question")
        ],
        [
            InlineKeyboardButton(text="üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                 callback_data="main_menu")
        ]
    ]
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–≤
stablecoin_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="USDT",
                                 callback_data="usdt"),
            InlineKeyboardButton(text="USDC",
                                 callback_data="usdc")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥",
                                 callback_data="crypto_question")
        ],
        [
            InlineKeyboardButton(text="üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                 callback_data="main_menu")
        ]
    ]
)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è usdt –∏ usdc
usd_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥",
                                 callback_data="stablecoin")
        ],
        [
            InlineKeyboardButton(text="üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                 callback_data="main_menu")
        ]
    ]
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–ª—Ç–∫–æ–∏–Ω–æ–≤
altcoins_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="Ethereum (ETH)",
                                 callback_data="eth"),
            InlineKeyboardButton(text="Litecoin (LTC)",
                                 callback_data="ltc")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥",
                                 callback_data="crypto_question")
        ],
        [
            InlineKeyboardButton(text="üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                 callback_data="main_menu")
        ]
    ]
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è eth –∏ ltc
altcoins_back_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥",
                                 callback_data="altcoins")
        ],
        [
            InlineKeyboardButton(text="üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                 callback_data="main_menu")
        ]
    ]
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ
reg_on_exchange_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="BingX",
                                 callback_data="bingx"),
            InlineKeyboardButton(text="HTX",
                                 callback_data="htx"),
        ],
        [
            InlineKeyboardButton(text="–ß—Ç–æ —Ç–∞–∫–æ–µ KYC?",
                                 callback_data="what_is_kyc"),
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥",
                                 callback_data="general_questions"),
            InlineKeyboardButton(text="üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                 callback_data="main_menu")
        ]
    ]
)

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ß—Ç–æ —Ç–∞–∫–æ–µ KYC?
reg_on_exchange_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–ó–∞—á–µ–º –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∞–º –Ω—É–∂–µ–Ω KYC",
                                 callback_data="for_what_kyc"),
        ],
        [
            InlineKeyboardButton(text="–ö–∞–∫–∏–µ —Ä–∏—Å–∫–∏ —Å–≤—è–∑–∞–Ω—ã —Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ–º KYC",
                                 callback_data="risk_kyc"),
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥",
                                 callback_data="reg_on_exchange"),
            InlineKeyboardButton(text="üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                 callback_data="main_menu")
        ]
    ]
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ß—Ç–æ —Ç–∞–∫–æ–µ kyc
kyc_back_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥",
                                 callback_data="what_is_kyc")
        ],
        [
            InlineKeyboardButton(text="üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                 callback_data="main_menu")
        ]
    ]
)


@router.message(Command(commands=['start', 'help']))
async def send_welcome(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –∏ –ø–æ–º–æ—á—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –º–∏—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç!",
        reply_markup=main_keyboard
    )


@router.callback_query(lambda c: c.data == "free_chat")
async def free_chat(callback_query: types.CallbackQuery):
    """–°–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ: –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏."""
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è:",
        reply_markup=model_selection_keyboard
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "general_questions")
async def general_questions(callback_query: types.CallbackQuery):
    """–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö."""
    await callback_query.message.edit_text(
        "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö",
        reply_markup=general_questions_keyboard
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "crypto_question")
async def crypto_question(callback_query: types.CallbackQuery):
    """–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å '–ß—Ç–æ —Ç–∞–∫–æ–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞'."""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.send_message(
        callback_query.from_user.id,
        "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ ‚Äì —ç—Ç–æ —Ü–∏—Ñ—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—é—â–∞—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π."
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await bot.send_message(
        callback_query.from_user.id,
        "–í–∏–¥—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç",
        reply_markup=crypto_types_keyboard
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "bitcoin")
async def bitcoin(callback_query: types.CallbackQuery):
    """–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 'Bitcoin'."""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await bot.send_message(
        callback_query.from_user.id,
        "–ë–∏—Ç–∫–æ–∏–Ω (Bitcoin, BTC) - —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∏ –Ω–∞–∏–±–æ–ª–µ–µ –∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞, —Å–æ–∑–¥–∞–Ω–Ω–∞—è –≤ 2009 –≥–æ–¥—É –∞–Ω–æ–Ω–∏–º–Ω—ã–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º (–∏–ª–∏ –≥—Ä—É–ø–ø–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤) –ø–æ–¥ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–º –°–∞—Ç–æ—à–∏ –ù–∞–∫–∞–º–æ—Ç–æ."
    )
    await bot.send_message(
        callback_query.from_user.id,
        "–í–æ–∑–≤—Ä–∞—Ç",
        reply_markup=bitcoin_keyboard
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "stablecoin")
async def stablecoin(callback_query: types.CallbackQuery):
    """–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å '–°—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã'."""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await bot.send_message(
        callback_query.from_user.id,
        "–°—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã (stablecoins) - –æ–±—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –æ–±–º–µ–Ω–Ω—ã–π –∫—É—Ä—Å –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç–∞—Ä–∞—é—Ç—Å—è —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–≤—è–∑—ã–≤–∞—è –∏—Ö —Ü–µ–Ω—É –∫ –æ–±—ã—á–Ω—ã–º –≤–∞–ª—é—Ç–∞–º –∏–ª–∏ –∫–æ—Ç–∏—Ä–æ–≤–∫–∞–º –±–∏—Ä–∂–µ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–∑–æ–ª–æ—Ç–∞, –∑–µ—Ä–Ω–∞, –Ω–µ—Ñ—Ç–∏)"
    )
    await bot.send_message(
        callback_query.from_user.id,
        "–û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–µ–π–±–ª–∫–æ–Ω–∏–Ω—ã",
        reply_markup=stablecoin_keyboard
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "usdt")
async def usdt(callback_query: types.CallbackQuery):
    """–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 'USDT'."""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await bot.send_message(
        callback_query.from_user.id,
        "–°–∞–º—ã–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏ –ø–µ—Ä–≤—ã–π —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –¥–æ–ª–ª–∞—Ä—É –°–®–ê –≤ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–∏ 1:1. –°–æ–∑–¥–∞–Ω –∫–æ–º–ø–∞–Ω–∏–µ–π Tether Limited. –ó–∞–ø—É—Å–∫ –≤ 2014 –≥–æ–¥—É"
    )
    await bot.send_message(
        callback_query.from_user.id,
        "–í–æ–∑–≤—Ä–∞—Ç",
        reply_markup=usd_keyboard
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "usd—Å")
async def usdt(callback_query: types.CallbackQuery):
    """–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 'USD–°'."""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await bot.send_message(
        callback_query.from_user.id,
        "–°—Ç–µ–π–±–ª–∫–æ–∏–Ω, —Ç–∞–∫–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –¥–æ–ª–ª–∞—Ä—É –°–®–ê, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–º–ø–∞–Ω–∏–µ–π Circle —Å–æ–≤–º–µ—Å—Ç–Ω–æ —Å Coinbase. –ó–∞–ø—É—Å–∫ –≤ 2018 –≥–æ–¥—É"
    )
    await bot.send_message(
        callback_query.from_user.id,
        "–í–æ–∑–≤—Ä–∞—Ç",
        reply_markup=usd_keyboard
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "altcoins")
async def altcoins(callback_query: types.CallbackQuery):
    """–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å '–ê–ª—å—Ç–∫–æ–∏–Ω—ã'."""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await bot.send_message(
        callback_query.from_user.id,
        '–ê–ª—å—Ç–∫–æ–∏–Ω—ã (Altcoins) - —ç—Ç–æ –≤—Å–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, –∫—Ä–æ–º–µ –±–∏—Ç–∫–æ–∏–Ω–∞. –¢–µ—Ä–º–∏–Ω "–∞–ª—å—Ç–∫–æ–∏–Ω" –æ–±—Ä–∞–∑–æ–≤–∞–Ω –æ—Ç —Å–ª–æ–≤ "alternative" (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞) –∏ "coin" (–º–æ–Ω–µ—Ç–∞). –ê–ª—å—Ç–∫–æ–∏–Ω—ã —á–∞—Å—Ç–æ —Å–æ–∑–¥–∞—é—Ç—Å—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á, —É–ª—É—á—à–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –±–∏—Ç–∫–æ–∏–Ω–∞ –∏–ª–∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∏–¥–µ–π.'
    )
    await bot.send_message(
        callback_query.from_user.id,
        "–ê–ª—å—Ç–∫–æ–∏–Ω—ã",
        reply_markup=altcoins_keyboard
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "eth")
async def eth(callback_query: types.CallbackQuery):
    """–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 'Ethereum (ETH)'."""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await bot.send_message(
        callback_query.from_user.id,
        "Ethereum ‚Äì —ç—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –∏ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π (dApps). –û—Å–Ω–æ–≤–∞–Ω –≤ 2015 –≥–æ–¥—É –í–∏—Ç–∞–ª–∏–∫–æ–º –ë—É—Ç–µ—Ä–∏–Ω—ã–º."
    )
    await bot.send_message(
        callback_query.from_user.id,
        "–í–æ–∑–≤—Ä–∞—Ç",
        reply_markup=altcoins_back_keyboard
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "ltc")
async def ltc(callback_query: types.CallbackQuery):
    """–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 'Litecoine (LTC)'."""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await bot.send_message(
        callback_query.from_user.id,
        "Litecoin ‚Äì —ç—Ç–æ —Ñ–æ—Ä–∫ (–∫–æ–ø–∏—è —Å–æ —Å–≤–æ–∏–º–∏ –ø—Ä–µ–µ–º—É—â–µ—Å—Ç–≤–∞–º–∏) –ë–∏—Ç–∫–æ–∏–Ω–∞, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∏ –¥–µ—à—ë–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"
    )
    await bot.send_message(
        callback_query.from_user.id,
        "–í–æ–∑–≤—Ä–∞—Ç",
        reply_markup=altcoins_back_keyboard
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "reg_on_exchange")
async def reg_on_exchange(callback_query: types.CallbackQuery):
    """–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –±–∏—Ä–∂–µ'."""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.send_message(
        callback_query.from_user.id,
        "–ö—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∞ ‚Äì —ç—Ç–æ –æ–Ω–ª–∞–π–Ω-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ–∫—É–ø–∞—Ç—å, –ø—Ä–æ–¥–∞–≤–∞—Ç—å –∏ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã. –û–Ω–∞ –≤—ã—Å—Ç—É–ø–∞–µ—Ç –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–º –º–µ–∂–¥—É –ø—Ä–æ–¥–∞–≤—Ü–∞–º–∏ –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫. –ù–∞ –±–∏—Ä–∂–µ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –∏ –ø—Ä–æ–¥–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É."
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await bot.send_message(
        callback_query.from_user.id,
        "–°–ø–∏—Å–æ–∫ –±–∏—Ä–∂",
        reply_markup=reg_on_exchange_keyboard
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "bingx")
async def bingx(callback_query: types.CallbackQuery):
    """–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 'BingX'."""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await bot.send_message(
        callback_query.from_user.id,
        "BingX ‚Äî —ç—Ç–æ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –≤ 2018 –≥–æ–¥—É —Å –≥–æ–ª–æ–≤–Ω—ã–º –æ—Ñ–∏—Å–æ–º –≤ –°–∏–Ω–≥–∞–ø—É—Ä–µ. –û–Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä —É—Å–ª—É–≥, –≤–∫–ª—é—á–∞—è —Å–ø–æ—Ç–æ–≤—É—é –∏ —Ñ—å—é—á–µ—Ä—Å–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é, –∫–æ–ø–∏-—Ç—Ä–µ–π–¥–∏–Ω–≥ –∏ —Å–µ—Ç–æ—á–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é. –ë–∏—Ä–∂–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–æ–ª–µ–µ 1000 —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —è–∑—ã–∫–∞—Ö, –≤–∫–ª—é—á–∞—è —Ä—É—Å—Å–∫–∏–π"
    )
    await bot.send_message(
        callback_query.from_user.id,
        "https://bingx.com/en/register/"
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "htx")
async def htx(callback_query: types.CallbackQuery):
    """–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 'HTX'."""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await bot.send_message(
        callback_query.from_user.id,
        "HTX, —Ä–∞–Ω–µ–µ –∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞–∫ Huobi, ‚Äî —ç—Ç–æ –≤–µ–¥—É—â–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –≤ 2013 –≥–æ–¥—É –≤ –ö–∏—Ç–∞–µ –õ–µ–æ–Ω–æ–º –õ–∏. –ü–æ—Å–ª–µ –≤–≤–µ–¥–µ–Ω–∏—è –∑–∞–ø—Ä–µ—Ç–∞ –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤ –ö–∏—Ç–∞–µ –≤ 2017 –≥–æ–¥—É –∫–æ–º–ø–∞–Ω–∏—è –ø–µ—Ä–µ–Ω–µ—Å–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –°–µ–π—à–µ–ª—å—Å–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∞ –∏ —Ä–∞—Å—à–∏—Ä–∏–ª–∞ —Å–≤–æ—ë –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ, –æ—Ç–∫—Ä—ã–≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –≤ –ì–æ–Ω–∫–æ–Ω–≥–µ, –Æ–∂–Ω–æ–π –ö–æ—Ä–µ–µ, –Ø–ø–æ–Ω–∏–∏ –∏ –°–®–ê"
    )
    await bot.send_message(
        callback_query.from_user.id,
        "https://www.htx.co.zw/"
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "bingx")
async def bingx(callback_query: types.CallbackQuery):
    """–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 'BingX'."""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await bot.send_message(
        callback_query.from_user.id,
        "BingX ‚Äî —ç—Ç–æ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –≤ 2018 –≥–æ–¥—É —Å –≥–æ–ª–æ–≤–Ω—ã–º –æ—Ñ–∏—Å–æ–º –≤ –°–∏–Ω–≥–∞–ø—É—Ä–µ. –û–Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä —É—Å–ª—É–≥, –≤–∫–ª—é—á–∞—è —Å–ø–æ—Ç–æ–≤—É—é –∏ —Ñ—å—é—á–µ—Ä—Å–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é, –∫–æ–ø–∏-—Ç—Ä–µ–π–¥–∏–Ω–≥ –∏ —Å–µ—Ç–æ—á–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é. –ë–∏—Ä–∂–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–æ–ª–µ–µ 1000 —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —è–∑—ã–∫–∞—Ö, –≤–∫–ª—é—á–∞—è —Ä—É—Å—Å–∫–∏–π"
    )
    await bot.send_message(
        callback_query.from_user.id,
        "https://bingx.com/en/register/"
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "what_is_kyc")
async def what_is_kyc(callback_query: types.CallbackQuery):
    """–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å '–ß—Ç–æ —Ç–∞–∫–æ–µ KYC?'."""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await bot.send_message(
        callback_query.from_user.id,
        "KYC (Know Your Customer) ‚Äì —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—á–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. KYC –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, —Ç–∞–∫–∏—Ö –∫–∞–∫ –æ—Ç–º—ã–≤–∞–Ω–∏–µ –¥–µ–Ω–µ–≥, —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ä—Ä–æ—Ä–∏–∑–º–∞ –∏–ª–∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ."
    )
    await bot.send_message(
        callback_query.from_user.id,
        "–ü–æ–¥—Ä–æ–±–Ω–µ–µ",
        reply_markup=altcoins_back_keyboard
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "for_what_kyc")
async def for_what_kyc(callback_query: types.CallbackQuery):
    """–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å '–ó–∞—á–µ–º –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∞–º –Ω—É–∂–µ–Ω KYC'."""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await bot.send_message(
        callback_query.from_user.id,
        """
        KYC –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –Ω–æ—Ä–º –∏ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –±–æ—Ä—å–±—ã —Å –æ—Ç–º—ã–≤–∞–Ω–∏–µ–º –¥–µ–Ω–µ–≥ (AML) –∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç–µ—Ä—Ä–æ—Ä–∏–∑–º–∞. –ë–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É –±–∏—Ä–∂–∏ –º–æ–≥—É—Ç:
- –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫, –∞ –Ω–µ –±–æ—Ç –∏–ª–∏ –º–æ—à–µ–Ω–Ω–∏–∫.
- –û–±–µ—Å–ø–µ—á–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
- –†–∞–±–æ—Ç–∞—Ç—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –º–µ—Å—Ç–Ω—ã–º–∏ –∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º–∏ –∑–∞–∫–æ–Ω–∞–º–∏, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∞–ª—å–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ —É—Å–ª—É–≥–∏.

–ü—Ä–∏–º–µ—Ä: –ë–∏—Ä–∂–∞ –º–æ–∂–µ—Ç –æ—Ç–∫–∞–∑–∞—Ç—å –≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–¥–¥–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–π —é—Ä–∏—Å–¥–∏–∫—Ü–∏–∏.
        """
    )
    await bot.send_message(
        callback_query.from_user.id,
        "–í–æ–∑–≤—Ä–∞—Ç",
        reply_markup=kyc_back_keyboard
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "risk_kyc")
async def risk_kyc(callback_query: types.CallbackQuery):
    """–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å '–ö–∞–∫–∏–µ —Ä–∏—Å–∫–∏ —Å–≤—è–∑–∞–Ω—ã —Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ–º KYC'."""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await bot.send_message(
        callback_query.from_user.id,
        """
        –•–æ—Ç—è KYC –ø–æ–≤—ã—à–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –æ–Ω –∏–º–µ–µ—Ç –∏ —Å–≤–æ–∏ —Ä–∏—Å–∫–∏:

- –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:
–ï—Å–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø–æ–¥–≤–µ—Ä–≥–Ω–µ—Ç—Å—è —É—Ç–µ—á–∫–µ –¥–∞–Ω–Ω—ã—Ö, –ª–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å–∫—Ä—ã—Ç–∞ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.
- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞:
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É, –µ—Å–ª–∏ –Ω–µ —Å–º–æ–∂–µ—Ç –ø—Ä–æ–π—Ç–∏ KYC (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤).

–†–µ–≥—É–ª—è—Ç–æ—Ä–Ω—ã–µ —Ä–∏—Å–∫–∏:
–í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö –ª–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤–ª–∞—Å—Ç—è–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–µ—ç—Ç–∏—á–Ω–æ.

–°–ø–æ—Å–æ–±—ã –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∏—Å–∫–æ–≤:
- –í—ã–±–∏—Ä–∞—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å —Ö–æ—Ä–æ—à–µ–π —Ä–µ–ø—É—Ç–∞—Ü–∏–µ–π –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (2FA) –¥–ª—è –∑–∞—â–∏—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–∞.
        """
    )
    await bot.send_message(
        callback_query.from_user.id,
        "–í–æ–∑–≤—Ä–∞—Ç",
        reply_markup=kyc_back_keyboard
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data in ["llama3", "gpt_neo"])
async def choose_model(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏."""
    model_name = "LLaMA-3" if callback_query.data == "llama3" else "GPT-Neo"
    await state.update_data(model_choice=callback_query.data)
    await bot.send_message(
        callback_query.from_user.id,
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {model_name}. –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å!",
    )
    await callback_query.answer()

# –ü—Ä–æ–º–ø—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–µ–π
INTRO_PROMPT_LLAMA = (
    "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å—Ñ–µ—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. "
    "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ—Ç–≤–µ—á–∞—Ç—å –Ω–æ–≤–∏—á–∫–∞–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö, "
    "–æ–±—ä—è—Å–Ω—è—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ, –Ω–æ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º. "
    "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ—á–µ—Ç, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏."
)

INTRO_PROMPT_GPT_NEO = (
    "You are an assistant specializing in cryptocurrencies. "
    "Your task is to answer beginners' questions about cryptocurrencies, "
    "explaining as accurately and thoroughly as possible in simple terms. "
    "Provide additional details if requested."
)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
generation_params_llama = {
    "max_length": 500,
    "truncation": True,
    "num_return_sequences": 1,
    "repetition_penalty": 1.2,
    "temperature": 0.3,
    "top_k": 50,
    "top_p": 0.9,
    "do_sample": True,
    "min_length": 150
}

generation_params_gpt_neo = {
    "max_new_tokens": 700,
    "truncation": True,
    "num_return_sequences": 1,
    "repetition_penalty": 1.2,
    "temperature": 0.3,
    "top_k": 50,
    "top_p": 0.9,
    "do_sample": True,
    "min_length": 200
}


@router.message()
async def chat_with_model(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –º–æ–¥–µ–ª–µ–π."""
    data = await state.get_data()
    model_choice = data.get("model_choice", "llama3")

    # –í—ã–±–æ—Ä –ø—Ä–æ–º–ø—Ç–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if model_choice == "llama3":
        full_prompt = f"{INTRO_PROMPT_LLAMA}\n\n–í–æ–ø—Ä–æ—Å: {
            message.text}\n\n–û—Ç–≤–µ—Ç:"
        params = generation_params_llama
        pipeline = llama3_pipeline
    else:
        full_prompt = f"{INTRO_PROMPT_GPT_NEO}\n\nQuestion: {
            message.text}\n\nAnswer:"
        params = generation_params_gpt_neo
        pipeline = gpt_neo_pipeline

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    response = pipeline(full_prompt, **params)
    generated_text = response[0]['generated_text'].split(
        "Answer:" if model_choice == "gpt_neo" else "–û—Ç–≤–µ—Ç:")[-1].strip()

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    back_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥", callback_data="free_chat"),
                InlineKeyboardButton(
                    text="üîù –í –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∏ –∫–Ω–æ–ø–∫–∏
    await message.answer(
        f"–û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ {('LLaMA-3' if model_choice ==
                            'llama3' else 'GPT-Neo')}:\n\n{generated_text}",
        reply_markup=back_keyboard
    )


@router.callback_query(lambda c: c.data == "main_menu")
async def back_to_main_menu(callback_query: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await callback_query.message.edit_text(
        "üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=main_keyboard
    )
    await callback_query.answer()


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    connector = aiohttp.TCPConnector(ssl=ssl_context)
    async with aiohttp.ClientSession(connector=connector) as session:
        bot._session = session
        await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
